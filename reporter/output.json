{
  "title": "emit(eventName, ..a) should invoke the listener(...a) associated with eventName",
  "body": "() => {
    let event = new events_1.Event();
    let listenerOne = sinon.spy();
    let listenerTwo = sinon.spy();
    let eventName = \"eventName\";
    event.on(eventName, listenerOne);
    event.on(eventName, listenerTwo);
    event.emit(eventName, \"argument\");
    chai_1.expect(listenerTwo).to.have.been.calledWith(\"argument\");
    chai_1.expect(listenerOne).to.have.been.calledWith(\"argument\");
  }",
  "async": 0,
  "sync": true,
  "timedOut": false,
  "pending": false,
  "type": "test",
  "file": "C:\\Projects\\App\\test\\events.test.js",
  "parent": "#<Suite>",
  "ctx": "#<Context>",
  "duration": 0,
  "state": "passed"
}
